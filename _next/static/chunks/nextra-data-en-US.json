{"/0-setup-access-tools/0.2":{"title":"AWS Cloud 9 셋업","data":{}},"/0-setup-access-tools/0.1":{"title":"1. Administrator 권한의 IAM User, Access Key, Access Key Secret 생성","data":{}},"/0-setup-access-tools/0.3":{"title":"3. EKS, k8s 접근 도구 셋업","data":{}},"/0-setup-access-tools/0.4":{"title":"4. Cloud9 의 Access Key, Access Key Secret 새로고침 문제 해결방법","data":{}},"/1-create-an-eks/1.0":{"title":"1.0","data":{"소개#소개":"개인적으로는 EKS 를 CloudFormation 을 통해서 만드는 것을 추천하는 편입니다.\r\n하지만 처음부터 CloudFormation 으로 만드는 것은 쉽지는 않고, 먼저 콘솔에서 EKS 를 생성한 후에\r\n리소스들을 어떤 것들을 만들었는지 이런 것들을 모두 나열해보고 정리한 후에 CloudFormation 으로 EKS 를 생성하는 경우가 많지 않을까 싶습니다.이번문서는 콘솔에서 EKS 를 만드는 예를 정리합니다."}},"/1-create-an-eks/1.1":{"title":"1.1","data":{"1-eksctl-을-사용해-eks-cluster-생성#1. eksctl 을 사용해 EKS Cluster 생성":"eksctl 을 이용해 gitops-study-k8scluster 라는 이름의 클러스터를 생성한다.\neksctl create cluster --name gitops-study-k8scluster --region ap-northeast-2\n생성중인 모습 (Cloud 9)\r\n생성 완료\r\n클러스터를 생성하면 클러스터에 대한 VPC 도 하나 생성된다.\r\n(매니지먼트 콘솔 → VPC 메뉴)\r\n클러스터에 대한 서브넷이 생성된 모습\r\npublic 서브넷 3기, private 서브넷 3기가 생성되어 있다.\r\nEKS 대시보드로 이동한다.\r\n생성된 클러스터의 모습\r\n생성된 노드 그룹의 모습\r\n노드 그룹 상세 화면이다.\r\n인스턴스의 크기가 m5.large 로 비교적 크다. 이 사이즈를 다시 작은 사이즈의 노드그룹으로 바꿔줘야 추가적인 비용과금을 최소화할 수 있다. 다음 문서에서는 이 m5.large 인스턴스를 t3.small 인스턴스로 교체하는 작업을 수행한다."}},"/1-create-an-eks/1.3":{"title":"1.3","data":{"3-managed-nodegroup-삭제#3. Managed Nodegroup 삭제":"이미 구동중이던 Managed Node Group 을 삭제하는 것은 아래의 명령어를 수행하면 됩니다.","노드그룹-삭제#노드그룹 삭제":"eksctl delete nodegroup --cluster=gitops-study-k8scluster --name=ng-99fc00b4","노드-조회#노드 조회":"kubectl get no\r\nNAME                                                 STATUS                        ROLES    AGE   VERSION\r\nip-192-168-105-26.ap-northeast-2.compute.internal    Ready                         <none>   11m   v1.27.7-eks-e71965b\r\nip-192-168-164-248.ap-northeast-2.compute.internal   Ready                         <none>   11m   v1.27.7-eks-e71965b\r\nip-192-168-28-115.ap-northeast-2.compute.internal    Ready,SchedulingDisabled      <none>   67m   v1.27.7-eks-e71965b\r\nip-192-168-38-181.ap-northeast-2.compute.internal    NotReady,SchedulingDisabled   <none>   67m   v1.27.7-eks-e71965b\n새로 생성 중인 노드를 확인해보면 아래와 같습니다."}},"/0-setup-access-tools/0.5":{"title":"5. ArgoCD ALB 용도의 Ingress 에 서브넷 지정, 보안 그룹 생성","data":{}},"/1-create-an-eks/1.2":{"title":"1.2","data":{"2-eksctl-을-사용해-eks-nodegroup-생성#2. eksctl 을 사용해 EKS Nodegroup 생성":"이미 배포되어있는 m5.large 타입의 인스턴스 2기를 t3.small 로 교체해주려고 하는데, 항상 그렇듯 물리적으로 한번에 교체하는 것은 불가능합니다. 이미 구동중인 m5.large 는 그대로 둔 상태에서 t3.small 기반의 클러스터를 배포합니다. 그리고 남아있는 m5.large 인스턴스 두기는 삭제합니다. 이번 문서에서는 t3.small 인스턴스 2 기를 배포하는 과정을 설명합니다.\r\nminimum-cluster.yml 이라는 이름의 파일을 생성하고 아래의 yml 명세서를 작성합니다.\n---\r\napiVersion: eksctl.io/v1alpha5\r\nkind: ClusterConfig\r\nmetadata:\r\n  name: gitops-study-k8scluster\r\n  region: ap-northeast-2\r\nmanagedNodeGroups:\r\n  - name: ng-workers\r\n    labels:\r\n      role: workers\r\n    instanceType: t3.small\r\n    desiredCapacity: 2\r\n    volumeSize: 20\r\n    privateNetworking: true\n그리고 아래의 eksctl 커맨드를 실행합니다.\neksctl create nodegroup --config-file=minimum-cluster.yml\nCloud 9 내에서 적용한 모습\r\n생성중인 노드는 콘솔에서 확인 가능합니다.\r\n\r\n새로 생성되는 중인 노드그룹은 ng-workers 입니다. ng-99fc00b4 라는 이름으로 이미 생성중인 노드 그룹은 노드의 인스턴스 크기가 커서 비용과금될 가능성이 크기 때문에 삭제할 예정입니다.\r\nng-workers 를 새로 만든 후에 ng-99fc00b4 을 삭제하는 이유는 이미 만들어둔 ng-99fc00b4 을 생성하면서 배포되어 있는 시스템 리소스들이 존재하는데 이 리소스들이 기존의 ec2 노드들에 자리잡고 있다. 그런데 이것을 삭제해버리면 이 노드들이 죽은 상태로 존재하게 됩니다.\r\n따라서 ng-workers 를 새로 추가 후에 ng-99fc00b4 를 삭제하면 기존에 생성된 노드들이 ng-workers 로 자연스럽게 이동이 될수 있기에 생성 후 삭제를 선택했습니다."}},"/1-create-an-eks/1.5":{"title":"1.5","data":{"5-oidc-조회-및-클러스터-service-account-생성#5. oidc 조회 및 클러스터 service account 생성":"AWS Loadbalancer Controller 의 공식 깃헙 블로그는 kubernetes-sigs.github.io/aws-load-balancer-controller 이다.\n로드밸런서 컨트롤러를 설정하기 위해서 가장 먼저 확인해야 할 내용은 Open Id Connect 가 쿠버네티스와 잘 연결되어 사용되고 있는지이다.\n쿠버네티스는 인그레스나 이런 것들을 배포를 하고 나면 Amazon 의 ALB 등을 제어를 해야 하는데, 이렇게 AWS 에 존재하는 ALB등을 제어하기 위해서 인증 방식의 다양한 방법 들 중 OAuth 방식의 Open Id Connect 를 지원해주고 있다.\n참고\nOpen ID(OIDC) 의 개념과 동작원리\n편의성을 높인 ID 인증관리 - OIDC(Open ID Connect) 가 주목받는 이유","환경변수-선언#환경변수 선언":"cluster_name , oidc 선언\n$ export cluster_name=gitops-study-k8scluster\r\n\r\n## eks cluster 에 대한 oidc_id 를 조회한다.\r\n$ oidc_id=$(aws eks describe-cluster --name $cluster_name --query \"cluster.identity.oidc.issuer\" --output text | cut -d '/' -f 5)\r\n\r\n## 구한 eks cluster 에 대한 oidc 를 출력해본다. \r\n$ echo $oidc_id\r\n8889A26B47C0F157228D712D894CA629\n생성한 oidc_id 는 필요할 때마다 아래의 명령을 수행해도 되지만 복사해서 따로 보관해두면 편하다.\n$ aws eks describe-cluster --name $cluster_name --query \"cluster.identity.oidc.issuer\" --output text | cut -d '/' -f 5\n만약 출력된 결과가 없다면 oidc 가 없다는 것인데, 아래의 명령을 통해 OIDC 자격증명 공급자를 생성해야 한다.\n$ eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve\r\n2023-12-24 13:56:17 [ℹ]  will create IAM Open ID Connect provider for cluster \"gitops-study-k8scluster\" in \"ap-northeast-2\"\r\n2023-12-24 13:56:17 [✔]  created IAM Open ID Connect provider for cluster \"gitops-study-k8scluster\" in \"ap-northeast-2\"\n내 경우에는 cluster 에 대한 iamserviceaccount 를 생성시에 오류가 났고, 위의 명령어를 그대로 수행하라는 출력이 나타났다. 그래서 위의 명령어를 수행한 후에 iamserviceaccount 를 다시 생성했다.","iam-정책-json-다운로드--aws-cli로-정책-생성#IAM 정책 json 다운로드 & AWS CLI로 정책 생성":"kubernetes 공식 깃헙 계정(github.com/kubernetes-sigs) 내의 리포지터리인 github.com/kubernetes-sigs/aws-load-balancer-controller 에서는 kubernetes 에서 AWS 환경에 맞도록 Ingress Controller 를 설치하기 위해 aws-load-balancer-controller 를 구성할 때 필요한 IAM Policy 부터 여러가지 다양한 AWS 환경 내에서의 리소스 Json 및 예제 등을 제공하고 있다.\n아래 iam_policy.json 은 위에서 공식 깃헙 계정 내의 https://github.com/kubernetes-sigs/aws-load-balancer-controller/blob/main/docs/install/iam_policy.json 에서 제공하는 IAM 정책 json 파일이다.\nCloud9 에서 다 귀찮다 싶으면 raw 파일 링크 을 통해 curl 로 다운받아서 사용하면 된다.\n{\r\n    \"Version\": \"2012-10-17\",\r\n    \"Statement\": [\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"iam:CreateServiceLinkedRole\"\r\n            ],\r\n            \"Resource\": \"*\",\r\n            \"Condition\": {\r\n                \"StringEquals\": {\r\n                    \"iam:AWSServiceName\": \"elasticloadbalancing.amazonaws.com\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"ec2:DescribeAccountAttributes\",\r\n                \"ec2:DescribeAddresses\",\r\n                \"ec2:DescribeAvailabilityZones\",\r\n                \"ec2:DescribeInternetGateways\",\r\n                \"ec2:DescribeVpcs\",\r\n                \"ec2:DescribeVpcPeeringConnections\",\r\n                \"ec2:DescribeSubnets\",\r\n                \"ec2:DescribeSecurityGroups\",\r\n                \"ec2:DescribeInstances\",\r\n                \"ec2:DescribeNetworkInterfaces\",\r\n                \"ec2:DescribeTags\",\r\n                \"ec2:GetCoipPoolUsage\",\r\n                \"ec2:DescribeCoipPools\",\r\n                \"elasticloadbalancing:DescribeLoadBalancers\",\r\n                \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\r\n                \"elasticloadbalancing:DescribeListeners\",\r\n                \"elasticloadbalancing:DescribeListenerCertificates\",\r\n                \"elasticloadbalancing:DescribeSSLPolicies\",\r\n                \"elasticloadbalancing:DescribeRules\",\r\n                \"elasticloadbalancing:DescribeTargetGroups\",\r\n                \"elasticloadbalancing:DescribeTargetGroupAttributes\",\r\n                \"elasticloadbalancing:DescribeTargetHealth\",\r\n                \"elasticloadbalancing:DescribeTags\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"cognito-idp:DescribeUserPoolClient\",\r\n                \"acm:ListCertificates\",\r\n                \"acm:DescribeCertificate\",\r\n                \"iam:ListServerCertificates\",\r\n                \"iam:GetServerCertificate\",\r\n                \"waf-regional:GetWebACL\",\r\n                \"waf-regional:GetWebACLForResource\",\r\n                \"waf-regional:AssociateWebACL\",\r\n                \"waf-regional:DisassociateWebACL\",\r\n                \"wafv2:GetWebACL\",\r\n                \"wafv2:GetWebACLForResource\",\r\n                \"wafv2:AssociateWebACL\",\r\n                \"wafv2:DisassociateWebACL\",\r\n                \"shield:GetSubscriptionState\",\r\n                \"shield:DescribeProtection\",\r\n                \"shield:CreateProtection\",\r\n                \"shield:DeleteProtection\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"ec2:AuthorizeSecurityGroupIngress\",\r\n                \"ec2:RevokeSecurityGroupIngress\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"ec2:CreateSecurityGroup\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"ec2:CreateTags\"\r\n            ],\r\n            \"Resource\": \"arn:aws:ec2:*:*:security-group/*\",\r\n            \"Condition\": {\r\n                \"StringEquals\": {\r\n                    \"ec2:CreateAction\": \"CreateSecurityGroup\"\r\n                },\r\n                \"Null\": {\r\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"ec2:CreateTags\",\r\n                \"ec2:DeleteTags\"\r\n            ],\r\n            \"Resource\": \"arn:aws:ec2:*:*:security-group/*\",\r\n            \"Condition\": {\r\n                \"Null\": {\r\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"true\",\r\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"ec2:AuthorizeSecurityGroupIngress\",\r\n                \"ec2:RevokeSecurityGroupIngress\",\r\n                \"ec2:DeleteSecurityGroup\"\r\n            ],\r\n            \"Resource\": \"*\",\r\n            \"Condition\": {\r\n                \"Null\": {\r\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:CreateLoadBalancer\",\r\n                \"elasticloadbalancing:CreateTargetGroup\"\r\n            ],\r\n            \"Resource\": \"*\",\r\n            \"Condition\": {\r\n                \"Null\": {\r\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:CreateListener\",\r\n                \"elasticloadbalancing:DeleteListener\",\r\n                \"elasticloadbalancing:CreateRule\",\r\n                \"elasticloadbalancing:DeleteRule\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:AddTags\",\r\n                \"elasticloadbalancing:RemoveTags\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*\"\r\n            ],\r\n            \"Condition\": {\r\n                \"Null\": {\r\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"true\",\r\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:AddTags\",\r\n                \"elasticloadbalancing:RemoveTags\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*\"\r\n            ]\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\r\n                \"elasticloadbalancing:SetIpAddressType\",\r\n                \"elasticloadbalancing:SetSecurityGroups\",\r\n                \"elasticloadbalancing:SetSubnets\",\r\n                \"elasticloadbalancing:DeleteLoadBalancer\",\r\n                \"elasticloadbalancing:ModifyTargetGroup\",\r\n                \"elasticloadbalancing:ModifyTargetGroupAttributes\",\r\n                \"elasticloadbalancing:DeleteTargetGroup\"\r\n            ],\r\n            \"Resource\": \"*\",\r\n            \"Condition\": {\r\n                \"Null\": {\r\n                    \"aws:ResourceTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:AddTags\"\r\n            ],\r\n            \"Resource\": [\r\n                \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*\",\r\n                \"arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*\"\r\n            ],\r\n            \"Condition\": {\r\n                \"StringEquals\": {\r\n                    \"elasticloadbalancing:CreateAction\": [\r\n                        \"CreateTargetGroup\",\r\n                        \"CreateLoadBalancer\"\r\n                    ]\r\n                },\r\n                \"Null\": {\r\n                    \"aws:RequestTag/elbv2.k8s.aws/cluster\": \"false\"\r\n                }\r\n            }\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:RegisterTargets\",\r\n                \"elasticloadbalancing:DeregisterTargets\"\r\n            ],\r\n            \"Resource\": \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Action\": [\r\n                \"elasticloadbalancing:SetWebAcl\",\r\n                \"elasticloadbalancing:ModifyListener\",\r\n                \"elasticloadbalancing:AddListenerCertificates\",\r\n                \"elasticloadbalancing:RemoveListenerCertificates\",\r\n                \"elasticloadbalancing:ModifyRule\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        }\r\n    ]\r\n}\n이번 실습에서는 curl 을 통해서 IAM 정책을 적용하기로 했다.\r\n메인 브랜치 IAM Policy json 링크\nhttps://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json\nv2.5.4 브랜치 IAM Policy json 링크\nhttps://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/install/iam_policy.json\n나는 메인 브랜치의 IAM Policy Json 을 사용하기로 했다.\n## iam policy 다운로드\r\n$ curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json\r\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\r\n                                 Dload  Upload   Total   Spent    Left  Speed\r\n100  8386  100  8386    0     0  28407      0 --:--:-- --:--:-- --:--:-- 28523\r\n\r\n## 다운로드 받은 json 파일인 iam_policy.json 을 이용해서 IAM Policy 생성 \r\n$ aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json\r\n\r\n실행결과\r\n{\r\n    \"Policy\": {\r\n        \"PolicyName\": \"AWSLoadBalancerControllerIAMPolicy\",\r\n        \"PolicyId\": \"ANPARSRDIIP7ERQMT63QE\",\r\n        \"Arn\": \"arn:aws:iam::{IAM 계정 ID}:policy/AWSLoadBalancerControllerIAMPolicy\",\r\n        \"Path\": \"/\",\r\n        \"DefaultVersionId\": \"v1\",\r\n        \"AttachmentCount\": 0,\r\n        \"PermissionsBoundaryUsageCount\": 0,\r\n        \"IsAttachable\": true,\r\n        \"CreateDate\": \"2023-12-24T12:55:42+00:00\",\r\n        \"UpdateDate\": \"2023-12-24T12:55:42+00:00\"\r\n    }\r\n}","service-account-생성#Service Account 생성":"$ eksctl create iamserviceaccount \\\r\n> --cluster=gitops-study-k8scluster \\\r\n> --namespace=kube-system \\\r\n> --name=aws-load-balancer-controller \\\r\n> --role-name AmazoneEKSLoadBalancerControllerRole \\\r\n> --attach-policy-arn=arn:aws:iam::{IAM 계정 ID}:policy/AWSLoadBalancerControllerIAMPolicy \\\r\n> --approve\n결과를 확인해본다.\n$ aws sts get-caller-identity\r\n{\r\n    \"UserId\": \"AIDARSRDIIP7JGE4QNBL7\",\r\n    \"Account\": \"108521866238\",\r\n    \"Arn\": \"arn:aws:iam::108521866238:user/gitops-study-argocd\"\r\n}\n생성된 service account 를 확인해본다.\n$ kubectl describe sa aws-load-balancer-controller -n kube-system\r\nName:                aws-load-balancer-controller\r\nNamespace:           kube-system\r\nLabels:              app.kubernetes.io/managed-by=eksctl\r\nAnnotations:         eks.amazonaws.com/role-arn: arn:aws:iam::108521866238:role/AmazoneEKSLoadBalancerControllerRole\r\nImage pull secrets:  <none>\r\nMountable secrets:   <none>\r\nTokens:              <none>\r\nEvents:              <none>\r\n\r\n## 또는 아래와 같이 serviceaccount 를 모두 적어주어도 된다.\r\n$ kubectl describe serviceaccount aws-load-balancer-controller -n kube-system                                         \r\nName:                aws-load-balancer-controller\r\nNamespace:           kube-system\r\nLabels:              app.kubernetes.io/managed-by=eksctl\r\nAnnotations:         eks.amazonaws.com/role-arn: arn:aws:iam::108521866238:role/AmazoneEKSLoadBalancerControllerRole\r\nImage pull secrets:  <none>\r\nMountable secrets:   <none>\r\nTokens:              <none>\r\nEvents:              <none>"}},"/1-create-an-eks/1.4":{"title":"1.4","data":{"4-eks-추가기능-vpc-cni-csi-드라이버-kube-proxy-coredns-설치#4. EKS 추가기능 (VPC CNI, CSI 드라이버, kube-proxy, CoreDNS) 설치":"설치할 추가 기능들은 아래와 같습니다.\nAmazon VPC CNI\n클러스터 내에서의 Pod 의 네트워킹에 관련된 기능\nEKS 클러스터가 EC2 노드에 pod 을 배포할 때 네트워크를 어떻게 사용할 것인가에 대한 내\n기본적으로 아마존에서 제공하는 VPC의 네트워크 인터페이스에 대해서는 Elastic Network Interface 를 사용하도록 되어 있다. Elastic Network Interface 는 가상의 네트워크 카드 역할을 하는 특정 기능을 의미한다.\nAmazon VPC CNI 는 EKS 클러스터가 EC2 노드에 pod 을 배포할 때 ENI(Elastic Network Interface)를 사용하도록 도와주는 추가기능\nAmazon EBS CSI 드라이버\n클러스터 내에서 Amazon Elastic Block Storage(EBS)를 활성화한다.\nEKS 클러스터가 PV를 사용할 때, EBS 볼륨을 활용할 수 있도록 해주는 드라이버\n클러스터에 파드를 배포할 때 단순히 클러스터가 살아있는 동안에만 파드가 스토리지를 유지하도록 하는 경우도 있지만, 파드가 수행하는 작업들이 영구적인 디스크를 사용해야 하는 경우가 있는데 이런 경우에 PV를 사용한다. Amazon EBS CSI 드라이버는 PV 사용시에 볼륨을 EBS 볼륨으로 마운트할 수 있도록 도와주는 기능이다.\nkube-proxy\n클러스터 내에서의 Pod 의 네트워킹에 관련된 기능\nPod 과 같은 리소스가 배포되는 EC2 워커노드와 Pod 간 네트워크 통신 기능을 담당하는 기능\n각 노드마다 kube-proxy 라는 이름의 파드가 배치된다\n노드는 물리적인 vm이라고 볼수 있고 pod 는 하나의 컨테이너라고 볼수 있는데, 배포된 여러가지 서비스 애플리케이션 pod 들이 다른 pod 과 네트워크 통신을 할 때 현재 배포된 노드 내의 kube-proxy 를 활용해 통신한다.\nCoreDNS\n클러스터 내에서 서비스 검색 시 DNS를 통한 검색이 가능하게끔 도와주는 기능\nEKS 클러스터 내에서 DNS(도메인 네임 서비스) 역할을 하게끔 도와주는 기능\n배포되는 모든 Pod 에 대해 도메인 이름 확인할 수 있는 기능이 제공된다.\nEKS 대시보드 진입 → 추가기능 → 추가기능 가져오기 클릭\r\n나타나는 화면에서 kube-proxy, Amazon VPC CNI, CoreDNS, Amazon EBS CSI 드라이버 를 선택한 후 다음 버튼을 누른다.\r\n설치할 확장기능들의 버전이나 IAM 역할 등을 선택하는 화면이 나오는데, 기본설정을 그대로 유지한 채로 다음 버튼 클릭\r\n확인화면이다. 별다른 이상이 없기에 생성 버튼을 눌러서 추가기능 설치를 마무리한다."}},"/1-create-an-eks/1.6":{"title":"1.6","data":{"6-helm-을-이용해-aws-load-balancer-controller-생성#6. helm 을 이용해 aws-load-balancer-controller 생성":"","cloud9-에-helm-설치#Cloud9 에 helm 설치":"helm 설치에 대한 명령어는 helm.sh - Installing Helm ## From Script 의 내용을 발췌해왔다.\r\nALB Ingress Controller 를 helm 을 이용해서 설치 예정이다. 따라서 Cloud9 에 helm 을 설치해야 한다.\n## helm.sh 라는 이름으로 헬름 설치 파일을 curl 로 다운로드\r\n$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\r\n\r\n## 다운로드 받은 파일 확안\r\n$ ls\r\nREADME.md  download  get_helm.sh  minimum-cluster.yml\r\n\r\n## 실행 권한 변경\r\n$ chmod 0700 get_helm.sh\r\n\r\n## 설치파일 실행\r\n$ ./get_helm.sh \r\nDownloading https://get.helm.sh/helm-v3.13.1-linux-amd64.tar.gz\r\nVerifying checksum... Done.\r\nPreparing to install helm into /usr/local/bin\r\nhelm installed into /usr/local/bin/helm","helm-을-이용해-aws-load-balancer-controller-설치#helm 을 이용해 aws-load-balancer-controller 설치":"$ helm repo add eks https://aws.github.io/eks-charts\r\n\"eks\" has been added to your repositories\r\n\r\n$ helm repo update eks\r\nHang tight while we grab the latest from your chart repositories...\r\n...Successfully got an update from the \"eks\" chart repository\r\nUpdate Complete. ⎈Happy Helming!⎈\r\n\r\n$ helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=gitops-study-k8scluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller\r\nNAME: aws-load-balancer-controller\r\nLAST DEPLOYED: Sun Dec 24 14:11:01 2023\r\nNAMESPACE: kube-system\r\nSTATUS: deployed\r\nREVISION: 1\r\nTEST SUITE: None\r\nNOTES:\r\nAWS Load Balancer controller installed!\r\n\r\n\r\n## 설치 확인\r\n## kube-system 네임스페이스 아래에 aws-load-balancer-controller 가 존재하는지 찾아본다.\r\n$ kubectl get deployment -n kube-system aws-load-balancer-controller\r\nNAME                           READY   UP-TO-DATE   AVAILABLE   AGE\r\naws-load-balancer-controller   2/2     2            2           104s"}},"/2-setup-argocd/2.2":{"title":"2.2","data":{"2-argocd-구축-2-argocd-에-http-허용#2. ArgoCD 구축 (2) ArgoCD 에 HTTP 허용":""}},"/2-setup-argocd/2.3":{"title":"2.3","data":{"3-80포트-허용된-argocd-에-ingress-url-을-통해-접속해보기#3. 80포트 허용된 ArgoCD 에 Ingress URL 을 통해 접속해보기":""}},"/2-setup-argocd/2.1":{"title":"2.1","data":{"1-argocd-공식-제공-yml-을-이용해-argocd-설치#1. ArgoCD 공식 제공 yml 을 이용해 ArgoCD 설치":""}},"/2-setup-argocd/2.4":{"title":"2.4","data":{"4-argocd-의-default-password-변경#4. ArgoCD 의 Default Password 변경":""}},"/3-etc/3.1":{"title":"3.1","data":{"주요-공식자료들#주요 공식자료들":""}},"/advanced/satori":{"title":"Satori","data":{"":"Satori (悟り) is a Japanese Buddhist term for awakening, \"comprehension; understanding\"."}},"/about":{"title":"About","data":{"":"This is the about page! This page is shown on the navbar."}},"/3-etc/3.2":{"title":"3.2","data":{"트러블슈팅-cloud9-에서-aws-credential-이-자주-refresh-되는-이슈#(트러블슈팅) Cloud9 에서 AWS Credential 이 자주 Refresh 되는 이슈":""}},"/advanced":{"title":"Advanced","data":{"":"This is the index page for the Advanced folder!"}},"/":{"title":"Introduction","data":{"":"Welcome to Nextra! This is a basic docs template. You can use it as a starting point for your own project :)","what-is-nextrazxcv#What is Nextra?zxcv":"A simple, powerful and flexible site generation framework with everything you love from Next.js.","documentation#Documentation":"The documentation is available at https://nextra.site."}},"/another":{"title":"Another Page","data":{"":"let a = 1;\r\n\r\nconsole.log(a);","component#Component":"","external-component#External Component":""}}}